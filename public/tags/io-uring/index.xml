<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>io-uring on Alkdis Chen</title>
    <link>https://www.alkdischen.cn/tags/io-uring/</link>
    <description>Recent content in io-uring on Alkdis Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Alkdis Chen</copyright>
    <lastBuildDate>Mon, 14 Jun 2021 22:00:00 +0800</lastBuildDate><atom:link href="https://www.alkdischen.cn/tags/io-uring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>io_uring 的接口与实现</title>
      <link>https://www.alkdischen.cn/posts/articles/2021-06-14-deep-dive-io-uring/</link>
      <pubDate>Mon, 14 Jun 2021 22:00:00 +0800</pubDate>
      
      <guid>https://www.alkdischen.cn/posts/articles/2021-06-14-deep-dive-io-uring/</guid>
      <description>io_uring 是 Linux 提供的一个异步 I/O 接口。io_uring 在 2019 年加入 Linux 内核，经过了两年的发展，现在已经变得非常强大。本文基于 Linux 5.12.10 介绍 io_uring 接口。
io_uring 的实现主要在 fs/io_uring.c 中。
io_uring 的 用户态 API io_uring 的实现仅仅使用了三个 syscall：io_uring_setup, io_uring_enter 和 io_uring_register。它们分别用于设置 io_uring 上下文，提交并获取完成任务，以及注册内核用户共享的缓冲区。使用前两个 syscall 已经足够使用 io_uring 接口了。
用户和内核通过提交队列和完成队列进行任务的提交和收割。后文中会出现大量的简写，在这里先做一些介绍。
缩略语 英语 中文 解析 SQ Submission Queue 提交队列 一整块连续的内存空间存储的环形队列。
用于存放将执行操作的数据。 CQ Completion Queue 完成队列 一整块连续的内存空间存储的环形队列。
用于存放完成操作返回的结果。 SQE Submission Queue Entry 提交队列项 提交队列中的一项。 CQE Completion Queue Entry 完成队列项 完成队列中的一项。 Ring Ring 环 比如 SQ Ring，就是“提交队列信息”的意思。</description>
    </item>
    
  </channel>
</rss>
