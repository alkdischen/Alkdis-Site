<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>流处理 on Alkdis Chen</title>
    <link>https://www.alkdischen.cn/tags/%E6%B5%81%E5%A4%84%E7%90%86/</link>
    <description>Recent content in 流处理 on Alkdis Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Alkdis Chen</copyright>
    <lastBuildDate>Sun, 29 May 2022 23:00:00 +0800</lastBuildDate><atom:link href="https://www.alkdischen.cn/tags/%E6%B5%81%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>流处理引擎中基于共享状态索引的 Delta Join</title>
      <link>https://www.alkdischen.cn/posts/articles/2022-05-29-shared-state-in-risingwave/</link>
      <pubDate>Sun, 29 May 2022 23:00:00 +0800</pubDate>
      
      <guid>https://www.alkdischen.cn/posts/articles/2022-05-29-shared-state-in-risingwave/</guid>
      <description>在数据库系统中，我们可以通过创建索引的方式来加速 Join 计算的性能。比如 Postgres 就支持 Index Scans，通过扫描索引来加快 Join 的速度。然而，“索引”在流处理系统中很难实现。原因有二：
流处理系统的中间状态通常来说都是“一写一读”的。流处理系统处理的是无边界的数据，需要通过状态存储来持久化计算的中间状态，在系统故障时从检查点恢复。而这些中间状态，通常只有单个并行度的单个算子读写，不会被共享。 索引并不是在图上流动的流数据，而是一个被算子查询的东西。通常来讲，流数据在计算图上流动，算子永远可以从网络上拿到上游算子推送过来的数据；流处理系统仅根据流上的数据和自己的中间状态进行运算。而索引则是一个需要主动查询（而非在图上流动）的东西，算子需要主动获取索引，才能得到最终的结果。 Differential Dataflow (DD) 实现了一种数据流系统上的索引 Arrangement。Arrangement 可以理解成是一个 MVCC 的索引，记录了 (索引键, 时间) -&amp;gt; 值 的映射。对流数据建立的 Arrangement 就是一种索引，下游算子可以高效地通过索引键来查询某个时间点对应的所有 value。然而，DD 是一个纯内存的系统，没有考虑索引如何持久化；与此同时，如果索引和下游算子不在一个节点上，DD 就需要通过网络上的 RPC 来从上游节点查询索引中的数据，容易影响计算延迟。
有了索引以后，我们就可以在流系统中支持一种无中间状态的 Delta Join。只要所有需要 Join 的表都根据等值条件建立了索引，Delta Join 就可以完全利用索引产生最终的 Join 结果，无需任何中间状态。（相对的，正常的 Join 则需要分别持久化左右两张表的数据；如果是多路 Join，还需要持久化每一次二路 Join 的结果）
在 RisingWave 中，我们通过状态存储提供的 MVCC 能力支持了基于共享状态的 Delta Join。本文将先介绍 RisingWave 在云原生存储上的数据持久化流程；而后，介绍共享状态的实现；最后，介绍 RisingWave 中 Delta Join 的实现。
RisingWave 中的 Checkpoint 流处理系统持久化中间状态的过程被称为 checkpoint。在 RisingWave 中，checkpoint 是一个完全异步的过程。checkpoint 不影响流计算，算子可以持续不断地处理流上的数据，而无需关心 checkpoint 的进度。Checkpoint in RisingWave 详细介绍了这一流程。在这里，我们简单地梳理一下 checkpoint 流程中可能与共享状态相关的部分。</description>
    </item>
    
    <item>
      <title>流处理系统中状态的表示和存储</title>
      <link>https://www.alkdischen.cn/posts/articles/2022-01-15-store-of-streaming-states/</link>
      <pubDate>Sat, 15 Jan 2022 22:00:00 +0800</pubDate>
      
      <guid>https://www.alkdischen.cn/posts/articles/2022-01-15-store-of-streaming-states/</guid>
      <description>流处理系统处理的数据往往是没有边界的：数据会一直从数据源输入，用户需要看到 SQL 查询的实时结果。与此同时，流处理系统中的计算节点可能出错、失败，可能根据用户的需求实时扩容、缩容。在这一过程中，系统需要能够高效地将计算的中间状态在节点之间转移，并持久化到外部系统上，从而保证计算的不间断进行。
本文介绍了工业界学术界中流处理系统状态存储的三种方案：存储完整状态 (Flink 等系统)，存储共享状态 (以 Materialize / Differential Dataflow 为例)，存储部分状态 (以 Noria (OSDI &amp;lsquo;18) 为例)。这些存储方案各有优势，可以为未来的流处理引擎开发提供一些借鉴意义。
引入 假设某个购物系统中有两个表：
visit(product, user, length) 表示用户查看某产品多少秒。 info(product, category) 表示某个产品属于某个分类。 现在我们要查询：某个分类下用户查看产品最长的时间是多少。
CREATE VIEW result AS SELECT category, MAX(length) as max_length FROM info INNER JOIN visit ON product GROUP BY category 这个查询中包含两表 Join 和一个聚合操作。后文的讨论都将基于这个查询进行。
假设系统现在的状态是：
info(product, category) Apple, Fruit Banana, Fruit Carrot, Vegetable Potato, Vegetable visit(product, user, length) Apple, Alice, 10 Apple, Bob, 20 Carrot, Bob, 50 Banana, Alice, 40 Potato, Eve, 60 此时，查询的结果应该是</description>
    </item>
    
  </channel>
</rss>
