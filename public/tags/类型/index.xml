<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>类型 on Alkdis Chen</title>
    <link>https://www.alkdischen.cn/tags/%E7%B1%BB%E5%9E%8B/</link>
    <description>Recent content in 类型 on Alkdis Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Alkdis Chen</copyright>
    <lastBuildDate>Tue, 01 Feb 2022 14:00:00 +0800</lastBuildDate><atom:link href="https://www.alkdischen.cn/tags/%E7%B1%BB%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Rust 做类型体操 (下篇)</title>
      <link>https://www.alkdischen.cn/posts/articles/2022-02-01-rust-type-exercise-in-database-executors-final/</link>
      <pubDate>Tue, 01 Feb 2022 14:00:00 +0800</pubDate>
      
      <guid>https://www.alkdischen.cn/posts/articles/2022-02-01-rust-type-exercise-in-database-executors-final/</guid>
      <description>TL;DR: 本人前两周刚写的 type-exercise-in-rust (GitHub) 中已经包含了一整套数据库执行器的类型设计，本文将详细介绍整个设计过程中的思考过程和解决方案。
Day 7: 用宏关联逻辑类型和实际类型 在数据库系统中，逻辑类型和实际存储的类型往往不会是一一对应的关系。举例，CHAR 和 VARCHAR 是两种不同的逻辑类型，但大多数数据库系统对于这两种类型都会用同一种内存表示。在前几天的类型体操中，我们实现的类型都是实际类型 (Physical Type)。在今天，我们将会把逻辑类型和实际类型关联起来，并批量生成表达式。
目标 之前我们实现了 cmp_ge 这个函数，可以将两个输入 cast 成一个指定类型后进行比较。如何生成所有支持类型的 cmp_ge 函数呢？正常来说，我们可能需要：
pub fn build_binary_expression( f: ExpressionFunc, i1: DataType, i2: DataType, ) -&amp;gt; Box&amp;lt;dyn Expression&amp;gt; { use ExpressionFunc::*; use crate::expr::cmp::*; use crate::expr::string::*; match f { CmpLe =&amp;gt; match (i1, i2) { (DataType::BigInt, DataType::Integer) =&amp;gt; Box::new( BinaryExpression::&amp;lt;i64, i32, bool, _&amp;gt;::new(cmp_le::&amp;lt;i64, i32, i64&amp;gt;), ), (DataType::Integer, DataType::BigInt) =&amp;gt; Box::new( BinaryExpression::&amp;lt;i32, i64, bool, _&amp;gt;::new(cmp_le::&amp;lt;i32, i64, i64&amp;gt;), ), _ =&amp;gt; unimplemented!</description>
    </item>
    
  </channel>
</rss>
