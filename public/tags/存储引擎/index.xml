<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>存储引擎 on Alkdis Chen</title>
    <link>https://www.alkdischen.cn/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
    <description>Recent content in 存储引擎 on Alkdis Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Alkdis Chen</copyright>
    <lastBuildDate>Sat, 07 Aug 2021 12:00:00 +0800</lastBuildDate><atom:link href="https://www.alkdischen.cn/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LSM 存储引擎中 KV 分离的实现</title>
      <link>https://www.alkdischen.cn/posts/articles/2021-08-07-lsm-kv-separation-overview/</link>
      <pubDate>Sat, 07 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>https://www.alkdischen.cn/posts/articles/2021-08-07-lsm-kv-separation-overview/</guid>
      <description>常见的 LSM 存储引擎，如 LevelDB 和 RocksDB，将用户写入的一组的 key 和 value 存放在一起，按顺序写入 SST。在 compaction 过程中，引擎将上层的 SST 与下层 SST 合并，产生新的 SST 文件。这一过程中，SST 里面的 key 和 value 都会被重写一遍，带来较大的写放大。如果 value 的大小远大于 key，compaction 过程带来的写放大会引入巨大的开销。
在 WiscKey (FAST &amp;lsquo;16) 中，作者提出了一种对 SSD 友好的基于 LSM 树的存储引擎设计。它通过 KV 分离降低了 LSM 树的写放大。 KV 分离就是将大 value 存放在其他地方，并在 LSM 树中存放一个 value pointer (vptr) 指向 value 所在的位置。在 WiscKey 中，这个存放 value 的地方被称为 Value Log (vLog)。由此，LSM 树 compaction 时就不需要重写 value，仅需重新组织 key 的索引。这样一来，就能大大减少写放大，减缓 SSD 的磨损。
KV 分离的思路听起来非常简单，但在实际实现时，还需要考虑许多问题：</description>
    </item>
    
  </channel>
</rss>
